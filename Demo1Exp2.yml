---
-   hosts: 127.0.0.1
    connection: local
    become: yes
    remote_user: root
    vars:
        docker_custom_subnet_network: '192.186.4.0/24'
        docker_custom_network_name: 'Demo1Exp2'
        web_application_access_port: '3000'
        ip_address_WEB_UI: '192.186.4.11'
        ip_address_EPC: '192.186.4.2'
        ip_address_MONGO_DB: '192.186.4.10'
        ip_address_OAISIM_ENB: '192.186.4.253'
        ip_address_OAISIM_UE: '192.186.4.254'

        EPC_container_name: 'epc'
        mongo_db_host_access_port: '27017'
        mongo_db_container_expose_port: '27017'
        open5gs_epc_image_name: 'laboraufg/epc-open5gs'
        oaisim_enb_image_name: 'laboraufg/enb-openairsim'
        oaisim_ue_image_name: 'laboraufg/ue-openairsim'
        open5gs_mongodb_image_name : 'laboraufg/mongodb'
        open5gs_webui_image_name : 'laboraufg/webui-open5gs'
        UE_folder_name_container_name: '/root/ue/'
        ENB_folder_name_container_name: '/root/enb/'
        BASE_DIR_INSTALL: '/root/oaisim-4g-install'
        force_docker_reinstall: 'false'
        remove_old_install: 'true'
        MONGO_DB_container_name: 'mongodb'
        WEB_UI_container_name: 'webui-open5gs'
        EPC_container_name: 'epc'
        ENB_container_name: 'enb'
        UE_container_name: 'ue'
        path_workspace_open5gs: '/open5gs'
        default_username_WEBUI : "admin"
        default_password_WEBUI : "1423"
        init_enb: 'true'
        init_ue: 'true'
        init_epc: 'true'
        num_ues_init_simulation: '3'
        HPLMN : "20893"
        MSISDN : '33611123456'
        USIM_API_K : "8baf473f2f8fd09487cccbd7097c6862"
        OPC : "e734f8734007d6c5ce7a0508809e7e9c"
        clear_file_instalation: 'true'
        
        user_equiments:
            - { ue_id: UE0 ,   msin: '0000000001' }
            - { ue_id: UE1 ,   msin: '0000000002' }
            - { ue_id: UE2 ,   msin: '0000000003' }
    tasks:
        - fail: 
            msg: "'physical_network_interface' not found, this parameter is required!"
          when: physical_network_interface == ''

        - name  : Environment validation!
          assert:
            that:
              - ansible_memtotal_mb >= 1048
            msg: "Minimum memory requirements in the deployment environment is 4GB! Operation failed!"

        - name  : Remove old instalation Dir
          shell :  |
                sudo rm -rf {{ BASE_DIR_INSTALL }}

        - name  : Create dir instalation
          file  :
            path: "{{ BASE_DIR_INSTALL }}"
            state: directory

        - name  : Build enB rcc.band7.tm1.nfapi.conf file
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/rcc.band7.tm1.nfapi.conf"
            content: |
                Active_eNBs = ( "Computer Networks and Distributed Systems LABORAtory https://labora.inf.ufg.br - Brazil");
                # Asn1_verbosity, choice in: none, info, annoying
                Asn1_verbosity = "none";

                eNBs =
                (
                {
                    ////////// Identification parameters:
                    eNB_ID    =  0xe00;

                    cell_type =  "CELL_MACRO_ENB";

                    eNB_name  =  "Computer Networks and Distributed Systems LABORAtory https://labora.inf.ufg.br - Brazil";

                    // Tracking area code, 0x0000 and 0xfffe are reserved values
                    tracking_area_code = 1;

                    plmn_list = ( { mcc = 208; mnc = 93; mnc_length = 2; } );

                    tr_s_preference     = "local_mac"

                    ////////// Physical parameters:

                    component_carriers = (
                      {
                      node_function             = "3GPP_eNODEB";
                      node_timing               = "synch_to_ext_device";
                      node_synch_ref            = 0;
                      frame_type					      = "FDD";
                      tdd_config 					      = 3;
                      tdd_config_s            			      = 0;
                      prefix_type             			      = "NORMAL";
                      eutra_band              			      = 7;
                      downlink_frequency      			      = 2685000000L;
                      uplink_frequency_offset 			      = -120000000;
                      Nid_cell					        = 0;
                      N_RB_DL                 			      = 50;
                      Nid_cell_mbsfn          			      = 0;
                      nb_antenna_ports                                = 1;
                      nb_antennas_tx          			      = 1;
                      nb_antennas_rx          			      = 1;
                      tx_gain                                            = 90;
                      rx_gain                                            = 125;
                      pbch_repetition                                 = "FALSE";
                      prach_root              			      = 0;
                      prach_config_index      			      = 0;
                      prach_high_speed        			      = "DISABLE";
                      prach_zero_correlation  			      = 1;
                      prach_freq_offset       			      = 2;
                      pucch_delta_shift       			      = 1;
                      pucch_nRB_CQI           			      = 0;
                      pucch_nCS_AN            			      = 0;
                      pucch_n1_AN             			      = 0;
                      pdsch_referenceSignalPower 			      = -27;
                      pdsch_p_b                  			      = 0;
                      pusch_n_SB                 			      = 1;
                      pusch_enable64QAM          			      = "DISABLE";
                      pusch_hoppingMode                                  = "interSubFrame";
                      pusch_hoppingOffset                                = 0;
                      pusch_groupHoppingEnabled  			      = "ENABLE";
                      pusch_groupAssignment      			      = 0;
                      pusch_sequenceHoppingEnabled		   	      = "DISABLE";
                      pusch_nDMRS1                                       = 1;
                      phich_duration                                     = "NORMAL";
                      phich_resource                                     = "ONESIXTH";
                      srs_enable                                         = "DISABLE";
                      /*  srs_BandwidthConfig                                =;
                      srs_SubframeConfig                                 =;
                      srs_ackNackST                                      =;
                      srs_MaxUpPts                                       =;*/

                      pusch_p0_Nominal                                   = -96;
                      pusch_alpha                                        = "AL1";
                      pucch_p0_Nominal                                   = -104;
                      msg3_delta_Preamble                                = 6;
                      pucch_deltaF_Format1                               = "deltaF2";
                      pucch_deltaF_Format1b                              = "deltaF3";
                      pucch_deltaF_Format2                               = "deltaF0";
                      pucch_deltaF_Format2a                              = "deltaF0";
                      pucch_deltaF_Format2b		    	      = "deltaF0";

                      rach_numberOfRA_Preambles                          = 64;
                      rach_preamblesGroupAConfig                         = "DISABLE";
                      /*
                      rach_sizeOfRA_PreamblesGroupA                      = ;
                      rach_messageSizeGroupA                             = ;
                      rach_messagePowerOffsetGroupB                      = ;
                      */
                      rach_powerRampingStep                              = 4;
                      rach_preambleInitialReceivedTargetPower            = -108;
                      rach_preambleTransMax                              = 10;
                      rach_raResponseWindowSize                          = 10;
                      rach_macContentionResolutionTimer                  = 48;
                      rach_maxHARQ_Msg3Tx                                = 4;

                      pcch_default_PagingCycle                           = 128;
                      pcch_nB                                            = "oneT";
                      bcch_modificationPeriodCoeff			      = 2;
                      ue_TimersAndConstants_t300			      = 1000;
                      ue_TimersAndConstants_t301			      = 1000;
                      ue_TimersAndConstants_t310			      = 1000;
                      ue_TimersAndConstants_t311			      = 10000;
                      ue_TimersAndConstants_n310			      = 20;
                      ue_TimersAndConstants_n311			      = 1;
                      ue_TransmissionMode                                    = 1;

                      //Parameters for SIB18
                      rxPool_sc_CP_Len                                       = "normal";
                      rxPool_sc_Period                                       = "sf40";
                      rxPool_data_CP_Len                                     = "normal";
                      rxPool_ResourceConfig_prb_Num                          = 20;
                      rxPool_ResourceConfig_prb_Start                        = 5;
                      rxPool_ResourceConfig_prb_End                          = 44;
                      rxPool_ResourceConfig_offsetIndicator_present          = "prSmall";
                      rxPool_ResourceConfig_offsetIndicator_choice           = 0;
                      rxPool_ResourceConfig_subframeBitmap_present           = "prBs40";
                      rxPool_ResourceConfig_subframeBitmap_choice_bs_buf              = "00000000000000000000";
                      rxPool_ResourceConfig_subframeBitmap_choice_bs_size             = 5;
                      rxPool_ResourceConfig_subframeBitmap_choice_bs_bits_unused      = 0;
                /*    rxPool_dataHoppingConfig_hoppingParameter                       = 0;
                      rxPool_dataHoppingConfig_numSubbands                            = "ns1";
                      rxPool_dataHoppingConfig_rbOffset                               = 0;
                      rxPool_commTxResourceUC-ReqAllowed                              = "TRUE";
                */
                      // Parameters for SIB19
                      discRxPool_cp_Len                                               = "normal"
                      discRxPool_discPeriod                                           = "rf32"
                      discRxPool_numRetx                                              = 1;
                      discRxPool_numRepetition                                        = 2;
                      discRxPool_ResourceConfig_prb_Num                               = 5;
                      discRxPool_ResourceConfig_prb_Start                             = 3;
                      discRxPool_ResourceConfig_prb_End                               = 21;
                      discRxPool_ResourceConfig_offsetIndicator_present               = "prSmall";
                      discRxPool_ResourceConfig_offsetIndicator_choice                = 0;
                      discRxPool_ResourceConfig_subframeBitmap_present                = "prBs40";
                      discRxPool_ResourceConfig_subframeBitmap_choice_bs_buf          = "f0ffffffff";
                      discRxPool_ResourceConfig_subframeBitmap_choice_bs_size         = 5;
                      discRxPool_ResourceConfig_subframeBitmap_choice_bs_bits_unused  = 0;

                      }
                    );


                    srb1_parameters :
                    {
                        # timer_poll_retransmit = (ms) [5, 10, 15, 20,... 250, 300, 350, ... 500]
                        timer_poll_retransmit    = 80;

                        # timer_reordering = (ms) [0,5, ... 100, 110, 120, ... ,200]
                        timer_reordering         = 35;

                        # timer_reordering = (ms) [0,5, ... 250, 300, 350, ... ,500]
                        timer_status_prohibit    = 0;

                        # poll_pdu = [4, 8, 16, 32 , 64, 128, 256, infinity(>10000)]
                        poll_pdu                 =  4;

                        # poll_byte = (kB) [25,50,75,100,125,250,375,500,750,1000,1250,1500,2000,3000,infinity(>10000)]
                        poll_byte                =  99999;

                        # max_retx_threshold = [1, 2, 3, 4 , 6, 8, 16, 32]
                        max_retx_threshold       =  4;
                    }

                    # ------- SCTP definitions
                    SCTP :
                    {
                        # Number of streams to use in input/output
                        SCTP_INSTREAMS  = 2;
                        SCTP_OUTSTREAMS = 2;
                    };


                    ////////// MME parameters:
                    mme_ip_address      = ( { ipv4       = "{{ ip_address_EPC }}";
                                              ipv6       = "192:168:30::17";
                                              active     = "yes";
                                              preference = "ipv4";
                                            }
                                          );

                    enable_measurement_reports = "no";

                    ///X2
                    enable_x2 = "no";
                    t_reloc_prep      = 1000;      /* unit: millisecond */
                    tx2_reloc_overall = 2000;      /* unit: millisecond */

                    NETWORK_INTERFACES :
                    {
                        ENB_INTERFACE_NAME_FOR_S1_MME            = "{{ physical_network_interface }}";
                        ENB_IPV4_ADDRESS_FOR_S1_MME              = "{{ ip_address_OAISIM_ENB }}";
                        ENB_INTERFACE_NAME_FOR_S1U               = "{{ physical_network_interface }}";
                        ENB_IPV4_ADDRESS_FOR_S1U                 = "{{ ip_address_OAISIM_ENB }}";
                        ENB_PORT_FOR_S1U                         = 2152; # Spec 2152
                        ENB_IPV4_ADDRESS_FOR_X2C                 = "{{ ip_address_OAISIM_ENB }}";
                        ENB_PORT_FOR_X2C                         = 36422; # Spec 36422
                        
                    };
                  }
                );

                MACRLCs = (
                  {
                  num_cc = 1;
                  local_s_if_name  = "{{ physical_network_interface }}";
                  remote_s_address = "{{ ip_address_OAISIM_UE }}";
                  local_s_address  = "{{ ip_address_OAISIM_ENB }}";
                  local_s_portc    = 50001;
                  remote_s_portc   = 50000;
                  local_s_portd    = 50011;
                  remote_s_portd   = 50010;
                  tr_s_preference = "nfapi";
                  tr_n_preference = "local_RRC";
                        }  
                );

                THREAD_STRUCT = (
                  {
                    #three config for level of parallelism "PARALLEL_SINGLE_THREAD", "PARALLEL_RU_L1_SPLIT", or "PARALLEL_RU_L1_TRX_SPLIT"
                    parallel_config    = "PARALLEL_RU_L1_SPLIT";
                    #two option for worker "WORKER_DISABLE" or "WORKER_ENABLE"
                    worker_config      = "WORKER_ENABLE";
                  }
                );

                RUs = (
                    {
                      local_rf       = "yes"
                        nb_tx          = 1
                        nb_rx          = 1
                        att_tx         = 20
                        att_rx         = 0;
                        bands          = [38];
                        max_pdschReferenceSignalPower = -23;
                        max_rxgain                    = 116;
                        eNB_instances  = [0];
                    }
                );

                log_config =
                    {
                      global_log_level                      ="info";
                      global_log_verbosity                  ="medium";
                      hw_log_level                          ="info";
                      hw_log_verbosity                      ="medium";
                      phy_log_level                         ="info";
                      phy_log_verbosity                     ="medium";
                      mac_log_level                         ="info";
                      mac_log_verbosity                     ="high";
                      rlc_log_level                         ="info";
                      rlc_log_verbosity                     ="medium";
                      pdcp_log_level                        ="info";
                      pdcp_log_verbosity                    ="medium";
                      rrc_log_level                         ="info";
                      rrc_log_verbosity                     ="medium";
                  };

        - name  : Build UE ue.nfapi.conf file
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/ue.nfapi.conf"
            content: |
                log_config = {
                  global_log_level                      ="info";
                  global_log_verbosity                  ="medium";
                  hw_log_level                          ="info";
                  hw_log_verbosity                      ="medium";
                  phy_log_level                         ="info";
                  phy_log_verbosity                     ="medium";
                  mac_log_level                         ="info";
                  mac_log_verbosity                     ="medium";
                  rlc_log_level                         ="info";
                  rlc_log_verbosity                     ="medium";
                  pdcp_log_level                        ="info";
                  pdcp_log_verbosity                    ="medium";
                  rrc_log_level                         ="info";
                  rrc_log_verbosity                     ="full";
                };


                L1s = (
                        {
                        num_cc = 1;
                        tr_n_preference = "nfapi";
                        local_n_if_name  = "{{ physical_network_interface }}";
                        remote_n_address = "{{ ip_address_OAISIM_ENB }}";
                        local_n_address  = "{{ ip_address_OAISIM_UE }}";
                        local_n_portc    = 50000;
                        remote_n_portc   = 50001;
                        local_n_portd    = 50010;
                        remote_n_portd   = 50011;
                        }  
                );

                RUs = (
                    {		  
                      local_rf       = "yes"
                      nb_tx          = 1
                      nb_rx          = 1
                      att_tx         = 90
                      att_rx         = 0;
                      bands          = [7,38,42,43];
                      max_pdschReferenceSignalPower = -27;
                      max_rxgain                    = 125;
                    }		      
                );

        - name  : Build UE ue_eurecom_test_sfr.conf file 1/2 
          copy:
            dest: "{{ BASE_DIR_INSTALL }}/ue_eurecom_test_sfr.conf"
            content: |
                # List of known PLMNS
                PLMN: {
                    PLMN0: {
                        FULLNAME="Test network";
                        SHORTNAME="OAI4G";
                        MNC="01";
                        MCC="001";

                    };
                    PLMN1: {
                        FULLNAME="SFR France";
                        SHORTNAME="SFR";
                        MNC="10";
                        MCC="208";

                    };
                    PLMN2: {
                        FULLNAME="SFR France";
                        SHORTNAME="SFR";
                        MNC="11";
                        MCC="208";
                    };
                    PLMN3: {
                        FULLNAME="SFR France";
                        SHORTNAME="SFR";
                        MNC="13";
                        MCC="208";
                    };
                    PLMN4: {
                        FULLNAME="OAI LTEBOX";
                        SHORTNAME="OAIALU";
                        MNC="93";
                        MCC="208";
                    };
                    PLMN5: {
                        FULLNAME="T-Mobile USA";
                        SHORTNAME="T-Mobile";
                        MNC="280";
                        MCC="310";
                    };
                    PLMN6: {
                        FULLNAME="FICTITIOUS USA";
                        SHORTNAME="FICTITIO";
                        MNC="028";
                        MCC="310";
                    };
                    PLMN7: {
                        FULLNAME="Vodafone Italia";
                        SHORTNAME="VODAFONE";
                        MNC="10";
                        MCC="222";
                    };
                    PLMN8: {
                        FULLNAME="Vodafone Spain";
                        SHORTNAME="VODAFONE";
                        MNC="01";
                        MCC="214";
                    };
                    PLMN9: {
                        FULLNAME="Vodafone Spain";
                        SHORTNAME="VODAFONE";
                        MNC="06";
                        MCC="214";
                    };
                    PLMN10: {
                        FULLNAME="Vodafone Germ";
                        SHORTNAME="VODAFONE";
                        MNC="02";
                        MCC="262";
                    };
                    PLMN11: {
                        FULLNAME="Vodafone Germ";
                        SHORTNAME="VODAFONE";
                        MNC="04";
                        MCC="262";
                    };
                };

        - name  : Build UE ue_eurecom_test_sfr.conf file 1/2 
          blockinfile:
            path: /{{ BASE_DIR_INSTALL }}/ue_eurecom_test_sfr.conf
            block: |
                {{ item.ue_id }}:
                  {
                        USER: {
                            IMEI="356113022094149";
                            MANUFACTURER="EURECOM";
                            MODEL="LTE Android PC";
                            PIN="0000";
                        };
                        SIM: {
                            MSIN="{{ item.msin }}";
                            USIM_API_K="{{ USIM_API_K }}";
                            OPC="{{ OPC }}";
                            MSISDN="{{ MSISDN }}";
                        };
                        HPLMN= "{{ HPLMN }}";
                        UCPLMN_LIST = ();
                        OPLMN_LIST = ("00101", "20810", "20811", "20813", "20893", "310280", "310028");
                        OCPLMN_LIST = ("22210", "21401", "21406", "26202", "26204");
                        FPLMN_LIST = ();
                        EHPLMN_LIST= ();
                    };
            marker: "# {mark} User Equipment {{ item.ue_id }}"
          loop: "{{ user_equiments }}"
          loop_control:
            index_var: ue_idx

        - name  : Build iptables.sh file
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/iptables.sh"
            content: |
              #!/bin/sh
              sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
              iptables -t nat -A POSTROUTING -s 10.45.0.0/16 ! -o ogstun -j MASQUERADE

        - name  : Build setup.sh file
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/setup.sh"
            content: |
              #!/bin/sh

              if ! grep "ogstun" /proc/net/dev > /dev/null; then
                  ip tuntap add name ogstun mode tun
              fi
              ip addr del 10.45.0.1/16 dev ogstun 2> /dev/null
              ip addr add 10.45.0.1/16 dev ogstun
              ip addr del cafe::1/64 dev ogstun 2> /dev/null
              ip addr add cafe::1/64 dev ogstun
              ip link set ogstun up

        - name  : Open5GS-LTE configuration - mme.yaml
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/mme.yaml"
            content: |
              logger:
                  file: /open5gs/install/var/log/open5gs/mme.log

              mme:
                  freeDiameter: /open5gs/install/etc//freeDiameter/mme.conf
                  s1ap:
                      addr: {{ ip_address_EPC }}
                  gtpc:
                      addr: {{ ip_address_EPC }}
                  gummei: 
                    plmn_id:
                      mcc: 208
                      mnc: 93
                    mme_gid: 1
                    mme_code: 1
                  tai:
                    plmn_id:
                      mcc: 208
                      mnc: 93
                    tac: 1
                  security:
                      integrity_order : [ EIA1, EIA2, EIA0 ]
                      ciphering_order : [ EEA0, EEA1, EEA2 ]
                  network_name:
                      full: Open5GS
                  mme_name: open5gs-mme0

              sgw:
                  gtpc:
                    addr: 127.0.0.2

              pgw:
                  gtpc:
                    addr:
                      - 127.0.0.3
                      - ::1

              parameter:

              max:

              pool:

              sctp: 

        - name  : Open5GS-LTE configuration - sgw.yaml
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/sgw.yaml"
            content: |
              logger:
                  file: /open5gs/install/var/log/open5gs/sgw.log

              sgw:
                  gtpc:
                    addr: 127.0.0.2
                  gtpu:
                    addr: {{ ip_address_EPC }}

              parameter:
                  no_ipv6: true

              max:

              pool:
                
        - name  : Open5GS-LTE configuration - hss.yaml
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/hss.yaml"
            content: |
              db_uri: mongodb://{{ ip_address_MONGO_DB }}:{{ mongo_db_container_expose_port }}/open5gs

              logger:
                  file: /open5gs/install/var/log/open5gs/hss.log

              hss:
                  freeDiameter: /open5gs/install/etc/freeDiameter/hss.conf

              parameter:

              max:

              pool:

        - name  : Open5GS-LTE configuration - pcrf.yaml
          copy  :
            dest: "{{ BASE_DIR_INSTALL }}/pcrf.yaml"
            content: |
              db_uri: mongodb://{{ ip_address_MONGO_DB }}:{{ mongo_db_container_expose_port }}/open5gs
              logger:
                  file: /open5gs/install/var/log/open5gs/pcrf.log

              pcrf:
                  freeDiameter: /open5gs/install/etc/freeDiameter/pcrf.conf

              parameter:

              max:

              pool:

        - name  : Add Docker GPG key into apt
          apt_key: url=https://download.docker.com/linux/ubuntu/gpg

        - name  : Add Docker APT repository
          apt_repository:
            repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} edge

        - name  : Update APT
          shell :  |
                sudo apt update

        - name  : Install Docker - CE
          apt   :
            name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
            state: present
            update_cache: yes

        - name  : Stop UE container - If exists
          ignore_errors: true
          shell:  docker stop -t 1 {{ UE_container_name }}

        - name  : Stop ENB container - If exists
          ignore_errors: true
          shell:  docker stop -t 1 {{ ENB_container_name }}

        - name  : Stop EPC container - If exists
          ignore_errors: true
          shell:  docker stop -t 1 {{ EPC_container_name }}

        - name  : Stop WEBUE container - If exists
          ignore_errors: true
          shell: docker stop {{ WEB_UI_container_name }}

        - name  : Stop MONGODB container - If exists
          ignore_errors: true
          shell:  docker stop {{ MONGO_DB_container_name }}

        - name  : Run doker prune in stoped containers
          ignore_errors: true
          shell:  docker container prune -f

        - name  : Remove open5GS image
          ignore_errors: true
          shell:  docker image rm {{ open5gs_epc_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove enb-openairsim image
          ignore_errors: true
          shell: docker image rm {{ oaisim_ue_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove ue-openairsim image
          ignore_errors: true
          shell: docker image rm {{ oaisim_enb_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove Mongo-DB image
          ignore_errors: true
          shell: docker image rm {{ open5gs_mongodb_image_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove WebUI - Open5GS image
          ignore_errors: true
          shell: docker image rm {{ WEB_UI_container_name }}
          when: force_docker_reinstall == 'true'

        - name  : Remove open5GS docker custom network
          ignore_errors: true
          shell:  docker network rm {{ docker_custom_network_name }}

        - name  : Create Docker custom network
          shell:  docker network create --subnet={{ docker_custom_subnet_network }} --driver bridge {{ docker_custom_network_name }}            

        - name  : Run Open5GS MONGO-DB container
          shell:  docker run -ti -d -p {{ mongo_db_host_access_port }}:{{ mongo_db_container_expose_port }} --net {{ docker_custom_network_name }} --ip {{ ip_address_MONGO_DB }} --name {{ MONGO_DB_container_name }} {{ open5gs_mongodb_image_name }} bash

        - name  : Start MongoDB
          shell : docker exec {{ MONGO_DB_container_name }} /bin/sh -c "/etc/init.d/mongodb start"
          
        - name  : Run Open5GS WEBUI container
          shell : docker run -ti -d -e "DB_URI=mongodb://{{ ip_address_MONGO_DB }}:{{ mongo_db_container_expose_port }}/open5gs"  -p {{ web_application_access_port }}:3000 --net {{ docker_custom_network_name }} --ip {{ ip_address_WEB_UI }} --name {{ WEB_UI_container_name }} {{ open5gs_webui_image_name }} bash

        - name  : Start Web User Interface
          shell : docker exec -d {{ WEB_UI_container_name }} /bin/sh -c "cd {{ path_workspace_open5gs }}/webui && npm run dev"

        - name  : Run Open5GS 4G container
          shell : docker run -ti -d --cap-add=NET_ADMIN --device=/dev/net/tun:/dev/net/tun --sysctl net.ipv6.conf.all.disable_ipv6=0 --net {{ docker_custom_network_name }} --ip {{ ip_address_EPC }} --name {{ EPC_container_name }} {{ open5gs_epc_image_name }} bash

        - name  : Run OpenAirSIM-enB container
          shell : docker run -ti -d --cap-add=NET_ADMIN --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_OAISIM_ENB }} --name {{ ENB_container_name }} {{ oaisim_enb_image_name }} bash 

        - name  : Run OpenAirSIM-UE container
          shell : docker run -ti -d --cap-add=NET_ADMIN --privileged --net {{ docker_custom_network_name }} --ip {{ ip_address_OAISIM_UE }} --name {{ UE_container_name }} {{ oaisim_ue_image_name }} bash 

        - name  : Copy config file's to EPC container 
          shell : |
                docker cp ./iptables.sh {{ EPC_container_name }}:{{ path_workspace_open5gs }}/iptables.sh
                docker cp ./setup.sh    {{ EPC_container_name }}:{{ path_workspace_open5gs }}/setup.sh
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Config EPC container
          shell : |
                docker exec {{ EPC_container_name }} /bin/sh -c "chmod u+x {{ path_workspace_open5gs }}/iptables.sh"
                docker exec {{ EPC_container_name }} /bin/sh -c "chmod u+x {{ path_workspace_open5gs }}/setup.sh"

        - name  : Remove default YAML file's from EPC container 
          shell : |
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/amf.yaml"
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/ausf.yaml"
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/hss.yaml"
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/mme.yaml"
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/nrf.yaml"
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/pcrf.yaml"
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/smf.yaml"
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/udm.yaml"
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/udr.yaml"
                docker exec {{ EPC_container_name }} /bin/sh -c "rm -rf {{ path_workspace_open5gs }}/install/etc/open5gs/upf.yaml"

        - name  : Copy custom YAML file's to EPC container 
          shell : |
                docker cp ./mme.yaml  {{ EPC_container_name }}:{{ path_workspace_open5gs }}/install/etc/open5gs/mme.yaml
                docker cp ./sgw.yaml  {{ EPC_container_name }}:{{ path_workspace_open5gs }}/install/etc/open5gs/sgw.yaml
                docker cp ./hss.yaml  {{ EPC_container_name }}:{{ path_workspace_open5gs }}/install/etc/open5gs/hss.yaml
                docker cp ./pcrf.yaml  {{ EPC_container_name }}:{{ path_workspace_open5gs }}/install/etc/open5gs/pcrf.yaml
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Run config Setup.sh
          shell : docker exec {{ EPC_container_name }} /bin/sh -c "{{ path_workspace_open5gs }}/setup.sh"      

        - name  : Run config iptables.sh
          shell : docker exec {{ EPC_container_name }} /bin/sh -c "{{ path_workspace_open5gs }}/iptables.sh"
        
        - name  : Run PCRF simulation process 
          shell : docker exec -it -d {{ EPC_container_name }} /bin/sh -c "{{ path_workspace_open5gs }}/install/bin/open5gs-pcrfd"
          when  : init_epc == 'true'

        - pause :
            seconds: 10

        - name  : Run PGW simulation process 
          shell : docker exec -it -d {{ EPC_container_name }} /bin/sh -c "{{ path_workspace_open5gs }}/install/bin/open5gs-pgwd"
          when  : init_epc == 'true'

        - pause :
            seconds: 10

        - name  : Run SGW simulation process 
          shell : docker exec -it -d {{ EPC_container_name }} /bin/sh -c "{{ path_workspace_open5gs }}/install/bin/open5gs-sgwd"
          when  : init_epc == 'true'

        - pause :
            seconds: 10

        - name  : Run HSS simulation process 
          shell : docker exec -it -d {{ EPC_container_name }} /bin/sh -c "{{ path_workspace_open5gs }}/install/bin/open5gs-hssd"
          when  : init_epc == 'true'

        - pause :
            seconds: 10

        - name  : Run MME simulation process 
          shell : docker exec -it -d {{ EPC_container_name }} /bin/sh -c "{{ path_workspace_open5gs }}/install/bin/open5gs-mmed"
          when  : init_epc == 'true'
        
        - name  : Wait for port WEB_UI response
          wait_for:
            port: "{{ web_application_access_port }}"
            delay: 3

        - name  : Get CSRF Access Token - WEBUI container
          shell : |
              curl -s "http://{{ ansible_default_ipv4.address }}:{{ web_application_access_port }}/api/auth/csrf" -H 'Connection: keep-alive' -H 'Accept: application/json, text/plain, */*' -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36' -H 'X-CSRF-TOKEN: undefined' -H 'Sec-Fetch-Site: same-origin' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Dest: empty' -H 'Accept-Language: en-US,en;q=0.9,pt;q=0.8,pt-BR;q=0.7' -v --cookie-jar /tmp/free5gc.txt --compressed | sed 's/.*"csrfToken":"\([^"]\+\)".*/\1/'        
          register: csrf

        - pause :
            seconds: 3

        - name  : Login - WEBUI container
          shell: |
              curl "http://{{ ansible_default_ipv4.address }}:{{ web_application_access_port }}/api/auth/login" -H 'Connection: keep-alive' -H 'Accept: application/json, text/plain, */*' -H "X-CSRF-TOKEN: {{ csrf.stdout }}" -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36' -H 'Content-Type: application/json;charset=UTF-8' -H 'Origin: http://{{ ansible_default_ipv4.address }}:{{ web_application_access_port }}' -H 'Sec-Fetch-Site: same-origin' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Dest: empty' -H 'Accept-Language: en-US,en;q=0.9,pt;q=0.8,pt-BR;q=0.7' -b /tmp/free5gc.txt -o /dev/null --data-binary '{"username":"{{ default_username_WEBUI }}","password":"{{ default_password_WEBUI }}"}' --compressed  

        - name  : Subscriber User equipments - WEBUI container
          shell: |
              curl "http://{{ ansible_default_ipv4.address }}:{{ web_application_access_port }}/api/db/Subscriber" -H 'Connection: keep-alive' -H 'Accept: application/json, text/plain, */*' -H "X-CSRF-TOKEN: {{ csrf.stdout }}" -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36' -H 'Content-Type: application/json;charset=UTF-8' -H 'Sec-Fetch-Site: same-origin' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Dest: empty' -H 'Accept-Language: en-US,en;q=0.9,pt;q=0.8,pt-BR;q=0.7' -b /tmp/free5gc.txt --data-binary '{"imsi":"{{ HPLMN }}{{ item.msin }}","security":{"k":"{{ USIM_API_K }}","amf":"8000","op_type":0,"op_value":"{{ OPC }}","op":null,"opc":"{{ OPC }}"},"ambr":{"downlink":1024000,"uplink":1024000},"pdn":[{"apn":"internet","qos":{"qci":9,"arp":{"priority_level":8,"pre_emption_capability":1,"pre_emption_vulnerability":1}}}]}' --compressed

          loop: "{{ user_equiments }}"
          loop_control:
            index_var: ue_idx

        - name  : Remove rcc.band7.tm1.nfapi.conf default file from eNB container
          shell : docker exec {{ ENB_container_name }} /bin/sh -c "rm enb/ci-scripts/conf_files/rcc.band7.tm1.nfapi.conf"

        - name  : Copy rcc.band7.tm1.nfapi.conf file from dir_install to eNB container
          shell : docker cp ./rcc.band7.tm1.nfapi.conf {{ ENB_container_name }}:{{ ENB_folder_name_container_name }}/ci-scripts/conf_files/rcc.band7.tm1.nfapi.conf
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Remove ue.nfapi.conf default file from UE container
          shell : docker exec {{ UE_container_name }} /bin/sh -c "rm {{ UE_folder_name_container_name }}/ci-scripts/conf_files/ue.nfapi.conf"

        - name  : Copy ue.nfapi.conf from dir_install to UE container
          shell : docker cp ./ue.nfapi.conf {{ UE_container_name }}:/{{ UE_folder_name_container_name }}/ci-scripts/conf_files/ue.nfapi.conf
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Remove ue_eurecom_test_sfr.conf default file from UE container
          shell : docker exec {{ UE_container_name }} /bin/sh -c "rm {{ UE_folder_name_container_name }}/openair3/NAS/TOOLS/ue_eurecom_test_sfr.conf"
        
        - name  : Copy ue_eurecom_test_sfr.conf file from Install_Dir to UE container
          shell : docker cp ./ue_eurecom_test_sfr.conf {{ UE_container_name }}:/{{ UE_folder_name_container_name }}/openair3/NAS/TOOLS/ue_eurecom_test_sfr.conf
          args:
            chdir: "{{ BASE_DIR_INSTALL }}"

        - name  : Config conf2uedata inside UE container 
          shell : docker exec {{ UE_container_name }} /bin/sh -c "cd /{{ UE_folder_name_container_name }}/targets/bin && sudo ./conf2uedata -c /{{ UE_folder_name_container_name }}/openair3/NAS/TOOLS/ue_eurecom_test_sfr.conf -o /{{ UE_folder_name_container_name }}/cmake_targets/ran_build/build/"

        - name  : Clear file instalation
          shell : rm -rf {{ BASE_DIR_INSTALL }}
          when  : clear_file_instalation == 'true'

        - name  : Run OpenAirInterface eNB simulation process 
          shell : docker exec -it -d {{ ENB_container_name }} /bin/sh -c "cd /root/enb/cmake_targets/ran_build/build && sudo -E ./lte-softmodem -O /root/enb/ci-scripts/conf_files/rcc.band7.tm1.nfapi.conf > enb.log 2>&1"
          when  : init_enb == 'true'

        - pause :
            seconds: 15
          when  : init_enb == 'true'

        - name  : Run OpenAirInterface UE Simulation process 
          shell : docker exec -it -d {{ UE_container_name }} /bin/sh -c "cd /root/ue/cmake_targets/ran_build/build && ./lte-uesoftmodem -O /root/ue/ci-scripts/conf_files/ue.nfapi.conf --L2-emul 3 --num-ues {{ num_ues_init_simulation }} --nums_ue_thread 1 --nokrnmod 1 > ue.log 2>&1"
          when  : init_ue == 'true'